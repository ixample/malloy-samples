>>>markdown
# Written as a turducken
>>>malloy
source: movies is duckdb.sql("""
      SELECT 
        *,
        (SELECT COUNT(*) FROM UNNEST(genres)) =1 as has_one_genres,
        (SELECT COUNT(*) FROM UNNEST(genres)) =3 as has_three_genres,
        (SELECT COUNT(*) FROM UNNEST(genres) a(a) where a in ('Drama','Comedy')) > 0 
          as is_comedy_or_drama
      FROM
      'data/titles.parquet'
      """) extend {
  measure:
    genre_count is genres.count()
}
>>>markdown
## Written as a Join
>>>malloy
source: movies_base is duckdb.table('data/titles.parquet') extend {
  measure: genre_count is genres.count()
}

query: genre_facts is movies_base -> {
  group_by: tconst
  aggregate: 
    has_one_genres is genre_count = 1
    has_three_genres is genre_count = 3
    is_comedy_or_drama is genre_count {where: genres.value ~ 'Drama' | 'Comedy'} > 0
}

source: movies2 is movies_base extend {
  join_one: genre_facts with tconst
  dimension:
    has_one_genres is genre_facts.has_one_genres
    has_three_genres is genre_facts.has_three_genres
    is_comedy_or_drama is genre_facts.is_comedy_or_drama

}
>>>malloy
run: movies -> {
  group_by: tconst, primaryTitle, has_three_genres, has_one_genres
  aggregate: genre_count
  where: has_three_genres
  # list
  nest: by_genre is {
    group_by: genres.value
  }
}
>>>malloy
run: movies2 -> {
  aggregate: title_count is count()
  where: is_comedy_or_drama
}